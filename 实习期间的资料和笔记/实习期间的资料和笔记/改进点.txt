判断逻辑：
1. status 和 msg 目前可以写死，修改一下判断逻辑
（项目边界：项目里，一般来说很难做到一套模板覆盖所有情况；一般来讲是做出一套模板，然后对情况进行分类，针对不同情况有多个服务，做到边际效益最高
	这里从代码的角度上来说，确实是要用到status和msg字段，那么就需要在前端加上这两个字段的配置
	从工程的角度上来说，可以和上游沟通协调，统一都是这两个字段，那么可以直接写死，这样就不需要添加太多的冗余配置
）——done

2. service里对状态码的判断，if else逻辑范围不同，虽然内部逻辑应该是相同的，但是判断的范围不一致，也许会出现逻辑漏洞，
可以response.ok，后用else，在else里再去区分400-500和500-600  ——done

3. 取值键：定义成某个节点，然后把下面所有的数据全部展平成一层，方便入库 ——done

4. 请求参数，这个配置可以变量化，（目前考虑的是传入SQL语句）——done

5. 在手工执行的时候校验cron表达式，提醒cron表达式的问题

6. 调度那一块，可以不要任务状态表，直接在队列里传任务信息即可，直接取队列里的信息去修改这个任务，这样任务调度就不需要再去访问配置信息表了

7. 任务调度，可以在service上再封装一层，把所有的service定义成，run_service_name的形式，通过反射去找这个service的名字，
去跑这个方法，以后只写service即可，不用再if else了


